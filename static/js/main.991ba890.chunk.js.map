{"version":3,"sources":["component/Header/Header.tsx","api/api.ts","store/action.ts","component/PockemonInfo/PoxkemonInfo.tsx","component/PockemonList/PockemonList.tsx","store/selector.ts","App.tsx","store/index.ts","index.tsx"],"names":["Header","className","src","alt","getPockemons","url","a","axios","get","response","data","getPockemonInfo","URL","SET_POCKEMONS","PockemonInfo","pockemon","name","info","sprites","types","map","item","type","stats","stat","base_stat","moves","move","PockemonList","dispatch","useDispatch","useState","query","setQuery","optionValue","setOptionValue","nextPage","setNextPage","prevPage","setPrevPage","setTypes","pockemonSelect","setPockemonSelect","pockemons","useSelector","state","filter","toLowerCase","includes","some","getPockemonSeclectors","useEffect","pockemonsFromServer","next","previous","loadPockemonInfoFromServer","results","alert","loadPockemonsFromServer","pockemonsArr","Promise","all","newPockemon","front_default","pockemonData","payload","getPockemonType","arr","forEach","value","push","showNextPage","dataPockemon","showPrewPage","onClick","disabled","placeholder","onChange","event","target","classnames","PockemonAbout","App","InitialState","store","createStore","action","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.991ba890.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.scss';\n\nexport const Header: React.FC = () => {\n  return (\n    <header className=\"header\">\n      <div className=\"header__container\">\n        <img\n          src=\"./image/International_PokÃ©mon_logo.svg.png\"\n          alt=\"logo-pockemon\"\n          className=\"header__logo-image\"\n        />\n      </div>\n    </header>\n  );\n};\n","import axios from 'axios';\n\nexport const getPockemons = async (url:string) => {\n  const response = await axios.get(url);\n\n  return response.data;\n};\n\nexport const getPockemonInfo = async (URL: string) => {\n  const response = await axios.get(URL);\n\n  return response.data;\n};\n","export const SET_POCKEMONS = 'SET_POCKEMONS';\n\nexport const setPockemonAction = (payload: Pockemon[]):Action => ({\n  type: SET_POCKEMONS,\n  payload,\n});\n","/* eslint-disable no-console */\nimport React from 'react';\nimport './PockemonInfo.scss';\n\ntype Props = {\n  pockemon: Pockemon\n};\n\nexport const PockemonInfo: React.FC<Props> = ({ pockemon }) => {\n  return (\n    <div className=\"pockemon-info\">\n      <h3 className=\"pockemon-info__title\">Pockemon details:</h3>\n      <section className=\"pockemon-info__post\">\n        <h2>{pockemon.name}</h2>\n      </section>\n      <section>\n        <img src={pockemon.info.sprites} alt=\"pockemon\" />\n      </section>\n      <section className=\"pockemon-info__type\">\n        <h3 className=\"pockemon-info__type-title\">Type:</h3>\n        {\n          pockemon.info.types.map(item => (\n            <p\n              className=\"pockemon-info__type-name button is-warning\"\n              key={item.type.name}\n            >\n              { item.type.name }\n            </p>\n          ))\n        }\n      </section>\n      <section className=\"pockemon-info__comments\">\n        <p className=\"pockemon-info__stat\">Stats:</p>\n        <ol>\n          {pockemon.info.stats.map(item => (\n            <li\n              key={item.stat.name}\n              className=\"pockemon-info__stats\"\n            >\n              {`${item.stat.name} - ${item.base_stat}`}\n            </li>\n          ))}\n        </ol>\n      </section>\n\n      <section className=\"pockemon-info__moves\">\n        <p className=\"pockemon-info__moves-title\">Moves:</p>\n        <ol>\n          {\n            pockemon.info.moves.map(item => (\n              <li key={item.move.name}>\n                {item.move.name}\n              </li>\n            ))\n          }\n        </ol>\n      </section>\n    </div>\n  );\n};\n","/* eslint-disable no-console */\n/* eslint-disable no-alert */\n/* eslint-disable @typescript-eslint/no-use-before-define */\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classnames from 'classnames';\nimport { getPockemonInfo, getPockemons } from '../../api/api';\nimport { setPockemonAction } from '../../store/action';\nimport { getPockemonSeclectors } from '../../store/selector';\nimport './PockemonList.scss';\nimport { PockemonInfo } from '../PockemonInfo';\n\nconst API = 'https://pokeapi.co/api/v2/pokemon/';\n\nexport const PockemonList: React.FC = () => {\n  const dispatch = useDispatch();\n  const [query, setQuery] = useState('');\n  const [optionValue, setOptionValue] = useState('');\n  const [nextPage, setNextPage] = useState('');\n  const [prevPage, setPrevPage] = useState('');\n  const [types, setTypes] = useState<string[]>([]);\n  const [pockemonSelect, setPockemonSelect] = useState<Pockemon | null>(null);\n  const pockemons = useSelector(getPockemonSeclectors(query, optionValue));\n\n  useEffect(() => {\n    const loadPockemonsFromServer = async () => {\n      try {\n        const pockemonsFromServer = await getPockemons(API);\n\n        setNextPage(pockemonsFromServer.next);\n        setPrevPage(pockemonsFromServer.previous);\n\n        await loadPockemonInfoFromServer(pockemonsFromServer.results);\n      } catch (error) {\n        alert('Eror try later');\n      }\n    };\n\n    loadPockemonsFromServer();\n  }, []);\n\n  const loadPockemonInfoFromServer = async (pockemonsArr:Pockemon[]) => {\n    const pockemonData = await Promise.all(pockemonsArr.map(async item => {\n      const response = await getPockemonInfo(item.url);\n      const newPockemon:Pockemon = {\n        name: item.name,\n        url: item.url,\n        info: {\n          sprites: response.sprites.front_default,\n          moves: response.moves,\n          stats: response.stats,\n          types: response.types,\n        },\n      };\n\n      return newPockemon;\n    }));\n\n    dispatch(setPockemonAction(pockemonData));\n    await getPockemonType(pockemonData);\n  };\n\n  const getPockemonType = async (data:Pockemon[]) => {\n    const arr:string[] = [];\n\n    data.forEach(value => {\n      value.info.types.forEach(item => {\n        if (!arr.includes(item.type.name)) {\n          arr.push(item.type.name);\n        }\n      });\n    });\n\n    setTypes(arr);\n  };\n\n  const showNextPage = async () => {\n    if (!nextPage) {\n      return;\n    }\n\n    const dataPockemon = await getPockemons(nextPage);\n\n    await loadPockemonInfoFromServer(dataPockemon.results);\n    setNextPage(dataPockemon.next);\n    setPrevPage(dataPockemon.previous);\n    setOptionValue('');\n  };\n\n  const showPrewPage = async () => {\n    if (!prevPage) {\n      return;\n    }\n\n    const dataPockemon = await getPockemons(prevPage);\n\n    await loadPockemonInfoFromServer(dataPockemon.results);\n    setNextPage(dataPockemon.next);\n    setPrevPage(dataPockemon.previous);\n    setOptionValue('');\n  };\n\n  const PockemonAbout = (pockemon:Pockemon) => {\n    if (pockemon.name === pockemonSelect?.name) {\n      setPockemonSelect(null);\n    } else {\n      setPockemonSelect(pockemon);\n    }\n  };\n\n  return (\n    <div className=\"pockemon-container\">\n      <div className=\"pockemon-list\">\n        <div>\n          <button\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={showPrewPage}\n            disabled={prevPage === ''}\n          >\n            Previous Page\n          </button>\n          <button\n            type=\"button\"\n            className=\"button is-primary\"\n            onClick={showNextPage}\n            disabled={nextPage === ''}\n          >\n            Next Page\n          </button>\n        </div>\n        <div className=\"option-container\">\n          <input\n            type=\"text\"\n            name=\"query\"\n            className=\"input\"\n            placeholder=\"Type search word\"\n            value={query}\n            onChange={(event) => (\n              setQuery(event.target.value)\n            )}\n          />\n          <select\n            className=\"input\"\n            value={optionValue}\n            onChange={(event) => (\n              setOptionValue(event.target.value)\n            )}\n          >\n            <option value=\"\">Chose type to sort Pockemons</option>\n            {types.map(item => (\n              <option\n                key={item}\n                value={item}\n              >\n                {item}\n              </option>\n            ))}\n          </select>\n        </div>\n        <ul className=\"pockemon-list__list\">\n          {pockemons.map(pockemon => (\n            <li\n              className=\"pockemon-list__item\"\n              key={pockemon.name}\n            >\n              <div className=\"pockemon-list__title\">\n                Pockemon name:\n                <b className=\"pockemon-list__name\">{` ${pockemon.name}`}</b>\n              </div>\n\n              <div>\n                <button\n                  type=\"button\"\n                  className={classnames('button is-primary', { 'is-danger': pockemonSelect?.name === pockemon.name })}\n                  onClick={() => {\n                    PockemonAbout(pockemon);\n                  }}\n                >\n                  { pockemonSelect?.name === pockemon.name ? 'Close' : 'More Details'}\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n      { pockemonSelect && (\n        <PockemonInfo pockemon={pockemonSelect} />\n      ) }\n    </div>\n  );\n};\n","export const getPockemonSeclectors = (query:string, optionValue:string) => {\n  return (state:State) => {\n    return state.pockemons.filter(pockemon => {\n      let data;\n\n      if (optionValue) {\n        data = pockemon.name.toLowerCase().includes(query.toLowerCase())\n        && pockemon.info.types.some(item => item.type.name === optionValue);\n      } else {\n        data = pockemon.name.toLowerCase().includes(query.toLowerCase());\n      }\n\n      return data;\n    });\n  };\n};\n","import React from 'react';\nimport './App.scss';\nimport { Header } from './component/Header';\nimport { PockemonList } from './component/PockemonList';\n\nexport const App: React.FC = () => {\n  return (\n    <>\n      <Header />\n      <PockemonList />\n    </>\n  );\n};\n","import { createStore } from 'redux';\nimport { SET_POCKEMONS } from './action';\n\nconst InitialState: State = {\n  pockemons: [],\n};\n\nconst reducer = (state = InitialState, action: Action) => {\n  switch (action.type) {\n    case SET_POCKEMONS:\n      return {\n        ...state,\n        pockemons: [...action.payload],\n      };\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.min.css';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}